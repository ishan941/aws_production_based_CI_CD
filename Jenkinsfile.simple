pipeline {
    agent any
    
    environment {
        // Docker configuration
        DOCKER_REGISTRY = credentials('docker-registry-url') // Configure in Jenkins credentials
        DOCKER_REPO = 'aws-app'
        IMAGE_TAG = "${BUILD_NUMBER}"
        
        // Application configuration
        NODE_ENV = 'production'
        
        // Swarm configuration
        SWARM_MANAGER = credentials('swarm-manager-host') // Configure in Jenkins credentials
        STACK_NAME = 'aws-app-stack'
    }
    
    stages {
        stage('Checkout') {
            steps {
                echo 'üîÑ Checking out source code...'
                checkout scm
                
                script {
                    echo "üèóÔ∏è  Build #${BUILD_NUMBER}"
                    echo "üìã Branch: ${BRANCH_NAME}"
                    echo "üíæ Commit: ${GIT_COMMIT}"
                }
            }
        }
        
        stage('Environment Setup') {
            steps {
                echo '‚öôÔ∏è Setting up build environment...'
                
                script {
                    // Check Docker availability
                    sh 'docker --version'
                    sh 'docker-compose --version'
                    
                    // Setup Node.js using Docker (more portable)
                    sh '''
                        # Use Node.js Docker image for consistency
                        docker run --rm -v $PWD:/workspace -w /workspace node:20-alpine node --version
                        docker run --rm -v $PWD:/workspace -w /workspace node:20-alpine npm --version
                    '''
                    
                    // Create production environment file
                    if (!fileExists('.env.production')) {
                        sh 'cp .env.example .env.production || touch .env.production'
                        echo 'üìù Created .env.production'
                    }
                }
            }
        }
        
        stage('Install Dependencies') {
            steps {
                echo 'üì¶ Installing dependencies...'
                
                script {
                    // Use Docker to run npm install for consistency
                    sh '''
                        docker run --rm -v $PWD:/workspace -w /workspace node:20-alpine sh -c "
                            npm ci --prefer-offline --no-audit
                            cd apps/backend && npm ci --prefer-offline --no-audit
                            cd ../web && npm ci --prefer-offline --no-audit
                        "
                    '''
                }
            }
        }
        
        stage('Build Applications') {
            parallel {
                stage('Build Backend') {
                    steps {
                        echo 'üèóÔ∏è  Building backend application...'
                        
                        script {
                            sh '''
                                docker run --rm -v $PWD:/workspace -w /workspace/apps/backend node:20-alpine sh -c "
                                    npm run build || echo 'No build script found'
                                "
                            '''
                        }
                    }
                }
                
                stage('Build Frontend') {
                    steps {
                        echo 'üèóÔ∏è  Building frontend application...'
                        
                        script {
                            sh '''
                                docker run --rm -v $PWD:/workspace -w /workspace/apps/web node:20-alpine sh -c "
                                    npm run build
                                "
                            '''
                        }
                    }
                }
            }
        }
        
        stage('Run Tests') {
            parallel {
                stage('Backend Tests') {
                    steps {
                        echo 'üß™ Running backend tests...'
                        
                        script {
                            sh '''
                                docker run --rm -v $PWD:/workspace -w /workspace/apps/backend node:20-alpine sh -c "
                                    npm test || echo 'No tests found'
                                " || echo 'Backend tests completed'
                            '''
                        }
                    }
                }
                
                stage('Frontend Tests') {
                    steps {
                        echo 'üß™ Running frontend tests...'
                        
                        script {
                            sh '''
                                docker run --rm -v $PWD:/workspace -w /workspace/apps/web node:20-alpine sh -c "
                                    npm test -- --run || echo 'No tests found'
                                " || echo 'Frontend tests completed'
                            '''
                        }
                    }
                }
            }
        }
        
        stage('Security Scan') {
            steps {
                echo 'üîí Running security scan...'
                
                script {
                    // Basic security scan using npm audit
                    sh '''
                        docker run --rm -v $PWD:/workspace -w /workspace node:20-alpine sh -c "
                            npm audit --audit-level=high || echo 'Security scan completed with warnings'
                            cd apps/backend && npm audit --audit-level=high || echo 'Backend security scan completed'
                            cd ../web && npm audit --audit-level=high || echo 'Frontend security scan completed'
                        " || echo 'Security scans completed'
                    '''
                }
            }
        }
        
        stage('Build Docker Images') {
            parallel {
                stage('Build Backend Image') {
                    steps {
                        echo 'üê≥ Building backend Docker image...'
                        
                        script {
                            sh """
                                docker build -f apps/backend/Dockerfile -t ${DOCKER_REPO}-backend:${IMAGE_TAG} .
                                docker tag ${DOCKER_REPO}-backend:${IMAGE_TAG} ${DOCKER_REPO}-backend:latest
                            """
                        }
                    }
                }
                
                stage('Build Frontend Image') {
                    steps {
                        echo 'üê≥ Building frontend Docker image...'
                        
                        script {
                            sh """
                                docker build -f apps/web/Dockerfile -t ${DOCKER_REPO}-frontend:${IMAGE_TAG} .
                                docker tag ${DOCKER_REPO}-frontend:${IMAGE_TAG} ${DOCKER_REPO}-frontend:latest
                            """
                        }
                    }
                }
            }
        }
        
        stage('Push Images') {
            when {
                anyOf {
                    branch 'main'
                    branch 'master'
                    branch 'develop'
                }
            }
            steps {
                echo 'üì§ Pushing Docker images to registry...'
                
                script {
                    // Only push if registry is configured
                    if (env.DOCKER_REGISTRY && env.DOCKER_REGISTRY != '') {
                        withCredentials([usernamePassword(credentialsId: 'docker-registry-credentials', 
                                                        usernameVariable: 'DOCKER_USER', 
                                                        passwordVariable: 'DOCKER_PASS')]) {
                            sh '''
                                echo $DOCKER_PASS | docker login $DOCKER_REGISTRY -u $DOCKER_USER --password-stdin
                                
                                # Tag and push backend
                                docker tag ${DOCKER_REPO}-backend:${IMAGE_TAG} ${DOCKER_REGISTRY}/${DOCKER_REPO}-backend:${IMAGE_TAG}
                                docker tag ${DOCKER_REPO}-backend:latest ${DOCKER_REGISTRY}/${DOCKER_REPO}-backend:latest
                                docker push ${DOCKER_REGISTRY}/${DOCKER_REPO}-backend:${IMAGE_TAG}
                                docker push ${DOCKER_REGISTRY}/${DOCKER_REPO}-backend:latest
                                
                                # Tag and push frontend
                                docker tag ${DOCKER_REPO}-frontend:${IMAGE_TAG} ${DOCKER_REGISTRY}/${DOCKER_REPO}-frontend:${IMAGE_TAG}
                                docker tag ${DOCKER_REPO}-frontend:latest ${DOCKER_REGISTRY}/${DOCKER_REPO}-frontend:latest
                                docker push ${DOCKER_REGISTRY}/${DOCKER_REPO}-frontend:${IMAGE_TAG}
                                docker push ${DOCKER_REGISTRY}/${DOCKER_REPO}-frontend:latest
                            '''
                        }
                    } else {
                        echo '‚ö†Ô∏è  Docker registry not configured, skipping push'
                    }
                }
            }
        }
        
        stage('Deploy to Swarm') {
            when {
                anyOf {
                    branch 'main'
                    branch 'master'
                }
            }
            steps {
                echo 'üöÄ Deploying to Docker Swarm...'
                
                script {
                    if (env.SWARM_MANAGER && env.SWARM_MANAGER != '') {
                        // Deploy to Docker Swarm
                        sh '''
                            # Copy deployment files to swarm manager
                            scp docker-stack.yml ${SWARM_MANAGER}:/tmp/
                            
                            # Deploy the stack
                            ssh ${SWARM_MANAGER} "
                                export DOCKER_REGISTRY=${DOCKER_REGISTRY}
                                export DOCKER_REPOSITORY=${DOCKER_REPO}
                                export IMAGE_TAG=${IMAGE_TAG}
                                
                                docker stack deploy -c /tmp/docker-stack.yml ${STACK_NAME}
                                
                                echo 'Waiting for services to start...'
                                sleep 30
                                
                                docker stack services ${STACK_NAME}
                            "
                        '''
                    } else {
                        echo '‚ö†Ô∏è  Swarm manager not configured, skipping deployment'
                        echo 'üè† For local deployment, use: ./docker/swarm/deploy-stack-local.sh'
                    }
                }
            }
        }
    }
    
    post {
        always {
            echo 'üßπ Cleaning up...'
            
            script {
                // Clean up Docker images to save space
                sh '''
                    docker image prune -f --filter "dangling=true" || true
                    docker system df
                '''
                
                // Archive build artifacts if they exist
                archiveArtifacts artifacts: 'apps/web/dist/**', allowEmptyArchive: true
                archiveArtifacts artifacts: 'apps/backend/dist/**', allowEmptyArchive: true
            }
        }
        
        success {
            echo '‚úÖ Pipeline completed successfully!'
            
            script {
                if (env.SWARM_MANAGER && env.SWARM_MANAGER != '') {
                    echo "üåê Application deployed to: ${SWARM_MANAGER}"
                    echo "üîç Check status with: docker stack services ${STACK_NAME}"
                } else {
                    echo "üè† For local testing:"
                    echo "   cd docker/swarm"
                    echo "   ./deploy-stack-local.sh"
                }
            }
        }
        
        failure {
            echo '‚ùå Pipeline failed!'
            
            script {
                // Display useful debug information
                sh '''
                    echo "=== Docker Info ==="
                    docker info || true
                    
                    echo "=== Docker Images ==="
                    docker images || true
                    
                    echo "=== Disk Space ==="
                    df -h || true
                '''
            }
        }
        
        unstable {
            echo '‚ö†Ô∏è  Pipeline completed with warnings!'
        }
    }
}