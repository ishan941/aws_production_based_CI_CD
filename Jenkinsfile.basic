pipeline {
    agent any
    
    environment {
        // Basic configuration
        DOCKER_REPO = 'aws-app'
        IMAGE_TAG = "${BUILD_NUMBER}"
        NODE_ENV = 'production'
        STACK_NAME = 'aws-app-stack'
    }
    
    stages {
        stage('Checkout') {
            steps {
                echo 'üîÑ Checking out source code...'
                checkout scm
                
                script {
                    echo "üèóÔ∏è  Build #${BUILD_NUMBER}"
                    echo "üìã Branch: ${env.BRANCH_NAME ?: 'unknown'}"
                    echo "üíæ Commit: ${env.GIT_COMMIT ?: 'unknown'}"
                }
            }
        }
        
        stage('Environment Setup') {
            steps {
                echo '‚öôÔ∏è Setting up build environment...'
                
                script {
                    // Check Docker availability
                    sh 'docker --version'
                    sh 'docker-compose --version || echo "docker-compose not available"'
                    
                    // Setup Node.js using Docker
                    sh 'docker run --rm node:20-alpine node --version'
                    sh 'docker run --rm node:20-alpine npm --version'
                    
                    // Create production environment file if needed
                    sh '''
                        if [ ! -f .env.production ]; then
                            if [ -f .env.example ]; then
                                cp .env.example .env.production
                                echo "Created .env.production from template"
                            else
                                touch .env.production
                                echo "Created empty .env.production"
                            fi
                        fi
                    '''
                }
            }
        }
        
        stage('Install Dependencies') {
            steps {
                echo 'üì¶ Installing dependencies...'
                
                script {
                    sh '''
                        # Install root dependencies
                        docker run --rm -v $PWD:/workspace -w /workspace node:20-alpine npm ci --prefer-offline --no-audit || echo "Root npm ci failed, continuing..."
                        
                        # Install backend dependencies
                        if [ -d "apps/backend" ]; then
                            docker run --rm -v $PWD:/workspace -w /workspace/apps/backend node:20-alpine npm ci --prefer-offline --no-audit || echo "Backend npm ci failed, continuing..."
                        fi
                        
                        # Install frontend dependencies
                        if [ -d "apps/web" ]; then
                            docker run --rm -v $PWD:/workspace -w /workspace/apps/web node:20-alpine npm ci --prefer-offline --no-audit || echo "Frontend npm ci failed, continuing..."
                        fi
                    '''
                }
            }
        }
        
        stage('Build Applications') {
            parallel {
                stage('Build Backend') {
                    steps {
                        echo 'üèóÔ∏è  Building backend application...'
                        
                        script {
                            sh '''
                                if [ -d "apps/backend" ]; then
                                    docker run --rm -v $PWD:/workspace -w /workspace/apps/backend node:20-alpine sh -c "
                                        npm run build || echo 'No build script found or build failed'
                                    "
                                else
                                    echo "Backend directory not found, skipping..."
                                fi
                            '''
                        }
                    }
                }
                
                stage('Build Frontend') {
                    steps {
                        echo 'üèóÔ∏è  Building frontend application...'
                        
                        script {
                            sh '''
                                if [ -d "apps/web" ]; then
                                    docker run --rm -v $PWD:/workspace -w /workspace/apps/web node:20-alpine sh -c "
                                        npm run build || echo 'Frontend build failed, continuing...'
                                    "
                                else
                                    echo "Frontend directory not found, skipping..."
                                fi
                            '''
                        }
                    }
                }
            }
        }
        
        stage('Run Tests') {
            steps {
                echo 'üß™ Running tests...'
                
                script {
                    sh '''
                        # Backend tests
                        if [ -d "apps/backend" ]; then
                            echo "Running backend tests..."
                            docker run --rm -v $PWD:/workspace -w /workspace/apps/backend node:20-alpine sh -c "
                                npm test || echo 'Backend tests failed or not found'
                            " || echo 'Backend tests completed'
                        fi
                        
                        # Frontend tests
                        if [ -d "apps/web" ]; then
                            echo "Running frontend tests..."
                            docker run --rm -v $PWD:/workspace -w /workspace/apps/web node:20-alpine sh -c "
                                npm test -- --run || npm test || echo 'Frontend tests failed or not found'
                            " || echo 'Frontend tests completed'
                        fi
                    '''
                }
            }
        }
        
        stage('Build Docker Images') {
            parallel {
                stage('Build Backend Image') {
                    steps {
                        echo 'üê≥ Building backend Docker image...'
                        
                        script {
                            sh '''
                                if [ -f "apps/backend/Dockerfile" ]; then
                                    docker build -f apps/backend/Dockerfile -t ${DOCKER_REPO}-backend:${IMAGE_TAG} .
                                    docker tag ${DOCKER_REPO}-backend:${IMAGE_TAG} ${DOCKER_REPO}-backend:latest
                                    echo "‚úÖ Backend image built successfully"
                                else
                                    echo "‚ö†Ô∏è  Backend Dockerfile not found, skipping..."
                                fi
                            '''
                        }
                    }
                }
                
                stage('Build Frontend Image') {
                    steps {
                        echo 'üê≥ Building frontend Docker image...'
                        
                        script {
                            sh '''
                                if [ -f "apps/web/Dockerfile" ]; then
                                    docker build -f apps/web/Dockerfile -t ${DOCKER_REPO}-frontend:${IMAGE_TAG} .
                                    docker tag ${DOCKER_REPO}-frontend:${IMAGE_TAG} ${DOCKER_REPO}-frontend:latest
                                    echo "‚úÖ Frontend image built successfully"
                                else
                                    echo "‚ö†Ô∏è  Frontend Dockerfile not found, skipping..."
                                fi
                            '''
                        }
                    }
                }
            }
        }
        
        stage('Local Test Deployment') {
            when {
                not {
                    anyOf {
                        branch 'main'
                        branch 'master'
                    }
                }
            }
            steps {
                echo 'üß™ Testing local deployment...'
                
                script {
                    sh '''
                        echo "Images built:"
                        docker images | grep ${DOCKER_REPO} || echo "No images found"
                        
                        echo "For local testing, you can run:"
                        echo "  docker run -p 3001:3001 ${DOCKER_REPO}-backend:latest"
                        echo "  docker run -p 80:80 ${DOCKER_REPO}-frontend:latest"
                        echo ""
                        echo "Or use Docker Swarm:"
                        echo "  cd docker/swarm && ./deploy-stack-local.sh"
                    '''
                }
            }
        }
        
        stage('Production Notification') {
            when {
                anyOf {
                    branch 'main'
                    branch 'master'
                }
            }
            steps {
                echo 'üöÄ Production branch detected!'
                
                script {
                    echo '''
                    üìã Production Deployment Options:
                    
                    1. Docker Registry Push:
                       - Configure docker-registry-url credential
                       - Configure docker-registry-credentials credential
                       - Re-run pipeline to push images
                    
                    2. Docker Swarm Deployment:
                       - Configure swarm-manager-host credential
                       - Set up SSH key access
                       - Re-run pipeline to deploy
                    
                    3. Manual Deployment:
                       - Images are built locally: ${DOCKER_REPO}-backend:${IMAGE_TAG}
                       - Use: docker save/load to transfer images
                       - Deploy with: ./docker/swarm/deploy-stack-local.sh
                    '''
                }
            }
        }
    }
    
    post {
        always {
            echo 'üßπ Cleaning up...'
            
            script {
                try {
                    // Clean up dangling images
                    sh 'docker image prune -f --filter "dangling=true" || true'
                    
                    // Show disk usage
                    sh 'docker system df || true'
                    
                    echo "‚úÖ Cleanup completed"
                } catch (Exception e) {
                    echo "‚ö†Ô∏è  Cleanup warning: ${e.getMessage()}"
                }
            }
        }
        
        success {
            echo '‚úÖ Pipeline completed successfully!'
            
            script {
                sh '''
                    echo ""
                    echo "üéâ Build completed successfully!"
                    echo ""
                    echo "üìä Built Images:"
                    docker images | grep ${DOCKER_REPO} || echo "No images found"
                    echo ""
                    echo "üöÄ Next Steps:"
                    echo "   Local testing: cd docker/swarm && ./deploy-stack-local.sh"
                    echo "   Production: Configure registry credentials in Jenkins"
                    echo ""
                '''
            }
        }
        
        failure {
            echo '‚ùå Pipeline failed!'
            
            script {
                try {
                    sh '''
                        echo ""
                        echo "üîç Debug Information:"
                        echo "====================="
                        echo ""
                        echo "Docker Info:"
                        docker info || echo "Docker info failed"
                        echo ""
                        echo "Available Images:"
                        docker images || echo "Docker images failed"
                        echo ""
                        echo "Disk Space:"
                        df -h . || echo "Disk usage check failed"
                        echo ""
                        echo "üõ†Ô∏è  Troubleshooting:"
                        echo "   1. Check Docker daemon is running"
                        echo "   2. Verify Jenkins has Docker permissions"
                        echo "   3. Check available disk space"
                        echo "   4. Review build logs above"
                    '''
                } catch (Exception e) {
                    echo "‚ö†Ô∏è  Debug info error: ${e.getMessage()}"
                }
            }
        }
        
        unstable {
            echo '‚ö†Ô∏è  Pipeline completed with warnings!'
        }
    }
}