version: '3.8'

services:
  web:
    image: ${DOCKER_REGISTRY}/${DOCKER_REPOSITORY}-web:${IMAGE_TAG:-latest}
    ports:
      - '80:80'
      - '443:443'
    environment:
      - NODE_ENV=production
    networks:
      - aws-app-network
    deploy:
      replicas: 2
      restart_policy:
        condition: on-failure
        delay: 5s
        max_attempts: 3
        window: 120s
      update_config:
        parallelism: 1
        delay: 10s
        failure_action: rollback
        monitor: 60s
        max_failure_ratio: 0.3
      rollback_config:
        parallelism: 1
        delay: 10s
        failure_action: pause
        monitor: 60s
        max_failure_ratio: 0.3
      placement:
        constraints:
          - node.role == worker
      resources:
        limits:
          cpus: '0.5'
          memory: 512M
        reservations:
          cpus: '0.1'
          memory: 256M
    healthcheck:
      test:
        [
          'CMD',
          'wget',
          '--no-verbose',
          '--tries=1',
          '--spider',
          'http://localhost/',
        ]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  backend:
    image: ${DOCKER_REGISTRY}/${DOCKER_REPOSITORY}-backend:${IMAGE_TAG:-latest}
    ports:
      - '3001:3001'
    environment:
      - NODE_ENV=production
      - PORT=3001
      - DATABASE_URL=postgresql://${POSTGRES_USER:-postgres}:${POSTGRES_PASSWORD}@postgres:5432/${POSTGRES_DB:-aws_app}
      - REDIS_URL=redis://redis:6379
      - JWT_SECRET=${JWT_SECRET}
      - SESSION_SECRET=${SESSION_SECRET}
    secrets:
      - jwt_secret
      - session_secret
      - db_password
    networks:
      - aws-app-network
    deploy:
      replicas: 3
      restart_policy:
        condition: on-failure
        delay: 5s
        max_attempts: 3
        window: 120s
      update_config:
        parallelism: 1
        delay: 10s
        failure_action: rollback
        monitor: 60s
        max_failure_ratio: 0.3
      rollback_config:
        parallelism: 1
        delay: 10s
        failure_action: pause
        monitor: 60s
        max_failure_ratio: 0.3
      placement:
        constraints:
          - node.role == worker
      resources:
        limits:
          cpus: '1.0'
          memory: 1G
        reservations:
          cpus: '0.2'
          memory: 512M
    healthcheck:
      test:
        [
          'CMD',
          'wget',
          '--no-verbose',
          '--tries=1',
          '--spider',
          'http://localhost:3001/api/health',
        ]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    depends_on:
      - postgres
      - redis

  postgres:
    image: postgres:15-alpine
    environment:
      POSTGRES_USER: ${POSTGRES_USER:-postgres}
      POSTGRES_PASSWORD_FILE: /run/secrets/db_password
      POSTGRES_DB: ${POSTGRES_DB:-aws_app}
    secrets:
      - db_password
    volumes:
      - postgres_data:/var/lib/postgresql/data
    networks:
      - aws-app-network
    deploy:
      replicas: 1
      restart_policy:
        condition: on-failure
        delay: 5s
        max_attempts: 3
        window: 120s
      placement:
        constraints:
          - node.role == manager
      resources:
        limits:
          cpus: '1.0'
          memory: 1G
        reservations:
          cpus: '0.2'
          memory: 512M
    healthcheck:
      test: ['CMD-SHELL', 'pg_isready -U ${POSTGRES_USER:-postgres}']
      interval: 10s
      timeout: 5s
      retries: 5

  redis:
    image: redis:7-alpine
    command: redis-server --appendonly yes --requirepass ${REDIS_PASSWORD}
    secrets:
      - redis_password
    volumes:
      - redis_data:/data
    networks:
      - aws-app-network
    deploy:
      replicas: 1
      restart_policy:
        condition: on-failure
        delay: 5s
        max_attempts: 3
        window: 120s
      placement:
        constraints:
          - node.role == manager
      resources:
        limits:
          cpus: '0.5'
          memory: 512M
        reservations:
          cpus: '0.1'
          memory: 256M
    healthcheck:
      test:
        [
          'CMD',
          'redis-cli',
          '--no-auth-warning',
          '-a',
          '${REDIS_PASSWORD}',
          'ping',
        ]
      interval: 10s
      timeout: 5s
      retries: 3

  # Monitoring and observability
  nginx-exporter:
    image: nginx/nginx-prometheus-exporter:0.10.0
    command:
      - -nginx.scrape-uri=http://web/nginx_status
    networks:
      - aws-app-network
    deploy:
      replicas: 1
      placement:
        constraints:
          - node.role == worker
    depends_on:
      - web

  # Log aggregation (optional)
  fluentd:
    image: fluent/fluentd:v1.16-debian-1
    volumes:
      - /var/lib/docker/containers:/var/lib/docker/containers:ro
      - /var/run/docker.sock:/var/run/docker.sock:ro
    networks:
      - aws-app-network
    deploy:
      mode: global
      resources:
        limits:
          cpus: '0.2'
          memory: 256M
        reservations:
          cpus: '0.1'
          memory: 128M

volumes:
  postgres_data:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: /opt/aws-app/postgres
  redis_data:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: /opt/aws-app/redis

networks:
  aws-app-network:
    driver: overlay
    attachable: true
    ipam:
      config:
        - subnet: 10.0.1.0/24

secrets:
  jwt_secret:
    external: true
  session_secret:
    external: true
  db_password:
    external: true
  redis_password:
    external: true

configs:
  nginx_config:
    external: true
